#+TITLE: Robert Hawdon's Doom Emacs config
#+AUTHOR: Robert Hawdon
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t
#+DESCRIPTION: Robert Hawdon's personal Doom Emacs config. With heavy insparation from Derek Taylor (https://gitlab.com/dwt1/dotfiles)
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#beacon][BEACON]]
- [[#clippy][CLIPPY]]
- [[#dired][DIRED]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
  - [[#keybindings-within-dired-with-peep-dired-mode-enabled][Keybindings Within Dired With Peep-Dired-Mode Enabled]]
  - [[#making-deleted-files-go-to-trash-can][Making deleted files go to trash can]]
- [[#doom-theme][DOOM THEME]]
- [[#emojis][EMOJIS]]
- [[#fonts][FONTS]]
- [[#magit][MAGIT]]
- [[#neotree][NEOTREE]]
- [[#markdown][MARKDOWN]]
- [[#minimap][MINIMAP]]
- [[#modeline][MODELINE]]
- [[#org-mode][ORG MODE]]
  - [[#org-auto-tangle][Org-auto-tangle]]
  - [[#org-fonts][Org fonts]]

* ABOUT THIS CONFIG
This is my personal Doom Emacs config.

* BEACON

Never lose your cursor. When you scroll, your cursor will shine! This is a global minor-mode. Turn it on everwhere with:

#+begin_src emacs-lisp
(beacon-mode 1)
#+end_src

* CLIPPY

Gives us a popup box with "Clippy, the paper clip". You can make him say various things by calling 'clippy-say' function.  But the more useful functions of clippy are the two describe functions provided: 'clippy-describe-function' and 'clippy-describe-variable'.  Hit the appropriate keybinding while the point is over a function/variable to call it.  A popup with helpful clippy will appear, telling you about the function/variable (using describe-function and describe-variable respectively).

| COMMAND                  | DESCRIPTION                           | KEYBINDING |
|--------------------------+---------------------------------------+------------|
| clippy-describe-function | /Clippy describes function under point/ | SPC c h f  |
| clippy-describe-variable | /Clippy describes variable under point/ | SPC c h v  |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("c h" . "Help info from Clippy")
       :desc "Clippy describes function under point" "f" #'clippy-describe-function
       :desc "Clippy describes variable under point" "v" #'clippy-describe-variable))

#+end_src

* DIRED

Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

** Keybindings To Open Dired

| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
*** Basic dired commands

| COMMAND                | DESCRIPTION                                 | KEYBINDING |
|------------------------+---------------------------------------------+------------|
| dired-view-file        | /View file in dired/                          | SPC d v    |
| dired-up-directory     | /Go up in directory tree/                     | h          |
| dired-find-file        | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line        | /Move down to next line/                      | j          |
| dired-previous-line    | /Move up to previous line/                    | k          |
| dired-mark             | /Mark file at point/                          | m          |
| dired-unmark           | /Unmark file at point/                        | u          |
| dired-do-copy          | /Copy current file or marked files/           | C          |
| dired-do-rename        | /Rename current file or marked files/         | R          |
| dired-hide-details     | /Toggle detailed listings on/off/             | (          |
| dired-git-info-mode    | /Toggle git information on/off/               | )          |
| dired-create-directory | /Create new empty directory/                  | +          |
| dired-diff             | /Compare file at point with another/          | =          |
| dired-subtree-toggle   | /Toggle viewing subtree at point/             | TAB        |

*** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | /Mark files using regex/     | % m        |
| dired-do-copy-regexp    | /Copy files using regex/     | % C        |
| dired-do-rename-regexp  | /Rename files using regex/   | % R        |
| dired-mark-files-regexp | /Mark all files using regex/ | * %        |

*** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | /Change the group of marked files/ | g G        |
| dired-do-chmod  | /Change the mode of marked files/  | M          |
| dired-do-chown  | /Change the owner of marked files/ | O          |
| dired-do-rename | /Rename file or all marked files/  | R          |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file"           "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Keybindings Within Dired With Peep-Dired-Mode Enabled
If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'

| COMMAND              | DESCRIPTION                              | KEYBINDING |
|----------------------+------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC

** Making deleted files go to trash can
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")
#+end_src

=NOTE=: For convenience, you may want to create a symlink to 'local/share/Trash' in your home directory:
#+begin_example
cd ~/
ln -s ~/.local/share/Trash .
#+end_example

* DOOM THEME

Setting the theme to doom-one.  To try out new themes, I set a keybinding for counsel-load-theme with 'SPC h t'.

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
(map! :leader
      :desc "Load new theme" "h t" #'counsel-load-theme)
#+end_src

* EMOJIS
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src
* FONTS

Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "VictorMono Nerd Font" :size 12)
      doom-variable-pitch-font (font-spec :family "Annai MN" :size 15)
      doom-big-font (font-spec :family "VictorMono Nerd Font" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

* MAGIT

Magit is the Emacs built in Git manager, practially everything you can do in git on the command line can be done with Magit. However, there doesn't appear to be a keybinding for a git pull in Doom Emacs. So lets set one up here:

#+begin_src emacs-lisp
(map! :leader
      :desc "Magit pull" "g p" #'magit-pull)
#+end_src

* NEOTREE

Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  Doom Emacs had no keybindings set for neotree.  Since Doom Emacs uses ‘SPC t’ for ‘toggle’ keybindings, I used ‘SPC t n’ for toggle-neotree.

#+begin_src emacs-lisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
;;(after! doom-themes
;;  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree"  "d n" #'neotree-dir)
#+end_src

* MARKDOWN
#+begin_src emacs-lisp
(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.7))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.5))))
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.4))))
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.3))))
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.2)))))
#+end_src

* MINIMAP
A minimap sidebar displaying a smaller version of the current buffer on either the left or right side. It highlights the currently shown region and updates its position automatically.  Be aware that this minimap program does not work in Org documents.  This is not unusual though because I have tried several minimap programs and none of them can handle Org.

| COMMAND      | DESCRIPTION                               | KEYBINDING |
|--------------+-------------------------------------------+------------|
| minimap-mode | /Toggle minimap-mode/                       | SPC t m    |

#+begin_src emacs-lisp
(setq minimap-window-location 'right)
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle minimap-mode" "m" #'minimap-mode))
#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :font "VictorMono Nerd Font-12")
(setq doom-modeline-height 12     ;; sets modeline height
      doom-modeline-bar-width 5   ;; sets right bar width
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t) ;; adds folder icon next to persp name
#+end_src

* ORG MODE

This is config for Org Mode, it has been mainly wrapped in `(after! org)` as without it, it may load in before Doom's config and get overritten later. I have also enabled org-journal, org-superstar and org-roam by adding (+journal +pretty +roam2) to the org section of my Doom Emacs init.el.

#+begin_src emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
          '(("google" . "http://www.google.com/search?q=")
            ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
            ("ddg" . "https://duckduckgo.com/?q=")
            ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-table-convert-region-max-lines 20000
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "BLOG(b)"           ; Blog writing assignments
             "GYM(g)"            ; Things to accomplish at the gym
             "PROJ(p)"           ; A project that contains other tasks
             "VIDEO(v)"          ; Video assignments
             "WAIT(w)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" )))) ; Task has been cancelled
#+end_src

** Org-auto-tangle

=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.  I have made adding this to your file even easier by creating a function 'dt/insert-auto-tangle-tag' and setting it to a keybinding 'SPC i a'.

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

(defun dt/insert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (evil-org-open-below 1)
  (insert "#+auto_tangle: t ")
  (evil-force-normal-state))

(map! :leader
      :desc "Insert auto_tangle tag" "i a" #'dt/insert-auto-tangle-tag)
#+end_src

** Org fonts
I have created an interactive function for each color scheme (M-x dt/org-colors-*).  These functions will set appropriate colors and font attributes for org-level fonts and the org-table font.

#+begin_src emacs-lisp
(after! org
    (defun dt/org-colors-doom-one ()
    "Enable Doom One colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#51afef" ultra-bold)
            (org-level-2 1.6 "#c678dd" extra-bold)
            (org-level-3 1.5 "#98be65" bold)
            (org-level-4 1.4 "#da8548" semi-bold)
            (org-level-5 1.3 "#5699af" normal)
            (org-level-6 1.2 "#a9a1e1" normal)
            (org-level-7 1.1 "#46d9ff" normal)
            (org-level-8 1.0 "#ff6c6b" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun dt/org-colors-dracula ()
    "Enable Dracula colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#8be9fd" ultra-bold)
            (org-level-2 1.6 "#bd93f9" extra-bold)
            (org-level-3 1.5 "#50fa7b" bold)
            (org-level-4 1.4 "#ff79c6" semi-bold)
            (org-level-5 1.3 "#9aedfe" normal)
            (org-level-6 1.2 "#caa9fa" normal)
            (org-level-7 1.1 "#5af78e" normal)
            (org-level-8 1.0 "#ff92d0" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun dt/org-colors-gruvbox-dark ()
    "Enable Gruvbox Dark colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#458588" ultra-bold)
            (org-level-2 1.6 "#b16286" extra-bold)
            (org-level-3 1.5 "#98971a" bold)
            (org-level-4 1.4 "#fb4934" semi-bold)
            (org-level-5 1.3 "#83a598" normal)
            (org-level-6 1.2 "#d3869b" normal)
            (org-level-7 1.1 "#d79921" normal)
            (org-level-8 1.0 "#8ec07c" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun dt/org-colors-monokai-pro ()
    "Enable Monokai Pro colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#78dce8" ultra-bold)
            (org-level-2 1.6 "#ab9df2" extra-bold)
            (org-level-3 1.5 "#a9dc76" bold)
            (org-level-4 1.4 "#fc9867" semi-bold)
            (org-level-5 1.3 "#ff6188" normal)
            (org-level-6 1.2 "#ffd866" normal)
            (org-level-7 1.1 "#78dce8" normal)
            (org-level-8 1.0 "#ab9df2" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun dt/org-colors-nord ()
    "Enable Nord colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#81a1c1" ultra-bold)
            (org-level-2 1.6 "#b48ead" extra-bold)
            (org-level-3 1.5 "#a3be8c" bold)
            (org-level-4 1.4 "#ebcb8b" semi-bold)
            (org-level-5 1.3 "#bf616a" normal)
            (org-level-6 1.2 "#88c0d0" normal)
            (org-level-7 1.1 "#81a1c1" normal)
            (org-level-8 1.0 "#b48ead" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun dt/org-colors-oceanic-next ()
    "Enable Oceanic Next colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#6699cc" ultra-bold)
            (org-level-2 1.6 "#c594c5" extra-bold)
            (org-level-3 1.5 "#99c794" bold)
            (org-level-4 1.4 "#fac863" semi-bold)
            (org-level-5 1.3 "#5fb3b3" normal)
            (org-level-6 1.2 "#ec5f67" normal)
            (org-level-7 1.1 "#6699cc" normal)
            (org-level-8 1.0 "#c594c5" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun dt/org-colors-palenight ()
    "Enable Palenight colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#82aaff" ultra-bold)
            (org-level-2 1.6 "#c792ea" extra-bold)
            (org-level-3 1.5 "#c3e88d" bold)
            (org-level-4 1.4 "#ffcb6b" semi-bold)
            (org-level-5 1.3 "#a3f7ff" normal)
            (org-level-6 1.2 "#e1acff" normal)
            (org-level-7 1.1 "#f07178" normal)
            (org-level-8 1.0 "#ddffa7" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun dt/org-colors-solarized-dark ()
    "Enable Solarized Dark colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#268bd2" ultra-bold)
            (org-level-2 1.6 "#d33682" extra-bold)
            (org-level-3 1.5 "#859900" bold)
            (org-level-4 1.4 "#b58900" semi-bold)
            (org-level-5 1.3 "#cb4b16" normal)
            (org-level-6 1.2 "#6c71c4" normal)
            (org-level-7 1.1 "#2aa198" normal)
            (org-level-8 1.0 "#657b83" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun dt/org-colors-solarized-light ()
    "Enable Solarized Light colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#268bd2" ultra-bold)
            (org-level-2 1.6 "#d33682" extra-bold)
            (org-level-3 1.5 "#859900" bold)
            (org-level-4 1.4 "#b58900" semi-bold)
            (org-level-5 1.3 "#cb4b16" normal)
            (org-level-6 1.2 "#6c71c4" normal)
            (org-level-7 1.1 "#2aa198" normal)
            (org-level-8 1.0 "#657b83" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun dt/org-colors-tomorrow-night ()
    "Enable Tomorrow Night colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#81a2be" ultra-bold)
            (org-level-2 1.6 "#b294bb" extra-bold)
            (org-level-3 1.5 "#b5bd68" bold)
            (org-level-4 1.4 "#e6c547" semi-bold)
            (org-level-5 1.3 "#cc6666" normal)
            (org-level-6 1.2 "#70c0ba" normal)
            (org-level-7 1.1 "#b77ee0" normal)
            (org-level-8 1.0 "#9ec400" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

  ;; Load our desired dt/org-colors-* theme on startup
  (dt/org-colors-doom-one)
)
#+end_src

