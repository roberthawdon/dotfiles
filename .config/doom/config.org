#+TITLE: Robert Hawdon's Doom Emacs config
#+AUTHOR: Robert Hawdon
#+PROPERTY: header-args :tangle config.el
#+auto_tangle: t
#+DESCRIPTION: Robert Hawdon's personal Doom Emacs config. With heavy insparation from Derek Taylor (https://gitlab.com/dwt1/dotfiles)
#+STARTUP: showeverything
#+LAST-MODIFIED: [2023-07-04 Tue 15:14]

* TABLE OF CONTENTS :toc:noexport:
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#beacon][BEACON]]
- [[#centaur-tabs][CENTAUR-TABS]]
- [[#clippy][CLIPPY]]
- [[#dired][DIRED]]
  - [[#keybindings-to-open-dired][Keybindings To Open Dired]]
  - [[#keybindings-within-dired][Keybindings Within Dired]]
  - [[#keybindings-within-dired-with-peep-dired-mode-enabled][Keybindings Within Dired With Peep-Dired-Mode Enabled]]
  - [[#making-deleted-files-go-to-trash-can][Making deleted files go to trash can]]
- [[#doom-theme][DOOM THEME]]
- [[#emojis][EMOJIS]]
- [[#evil-tweaks][EVIL TWEAKS]]
  - [[#remap-wq-and-q-to-kill-buffer][Remap :wq and :q to kill buffer]]
- [[#fonts][FONTS]]
- [[#neotree][NEOTREE]]
- [[#magit][MAGIT]]
  - [[#magit-forge][Magit-forge]]
- [[#markdown][MARKDOWN]]
- [[#maximise-at-start][MAXIMISE AT START]]
- [[#minimap][MINIMAP]]
- [[#modeline][MODELINE]]
- [[#open-specific-files][OPEN SPECIFIC FILES]]
- [[#org-mode][ORG MODE]]
  - [[#org-agenda][Org-agenda]]
  - [[#org-auto-tangle][Org-auto-tangle]]
  - [[#org-export][Org export]]
  - [[#org-file-properties][Org file properties]]
  - [[#org-fonts][Org fonts]]
  - [[#org-journal][Org-journal]]
  - [[#org-priorities][Org Priorities]]
  - [[#org-roam][Org-roam]]
  - [[#org-roam-auto-publish][Org-roam auto publish]]
  - [[#rebuild-org-cache][Rebuild Org Cache]]
- [[#perspective][PERSPECTIVE]]
- [[#start-page][START PAGE]]
- [[#title-bar][TITLE BAR]]

* ABOUT THIS CONFIG
This is my personal Doom Emacs config. Based heavily on the work of Derek Taylor (https://gitlab.com/dwt1/dotfiles) with a few modifications to suit my needs.

* BEACON

Never lose your cursor. When you scroll, your cursor will shine! This is a global minor-mode. Turn it on everwhere with:

#+begin_src emacs-lisp
(beacon-mode 1)

(map! :leader
      :desc "Toggle beacon mode" "t B" #'beacon-mode)
#+end_src
* CENTAUR-TABS
To use tabs in Doom Emacs, be sure to uncomment "tabs" in Doom's init.el.  Displays tabs at the top of the window similar to tabbed web browsers such as Firefox.  I don't actually use tabs in Emacs.  I placed this in my config to help others who may want tabs.  In the default configuration of Doom Emacs, 'SPC t' is used for "toggle" keybindings, so I choose 'SPC t c' to toggle centaur-tabs.  The "g" prefix for keybindings is used for a bunch of evil keybindings in Doom, but "g" plus the arrow keys were not used, so I thought I would bind those for tab navigation.  But I did leave the default "g t" and "g T" intact if you prefer to use those for centaur-tabs-forward/backward.

| COMMAND                     | DESCRIPTION               | KEYBINDING       |
|-----------------------------+---------------------------+------------------|
| centaur-tabs-mode           | /Toggle tabs globally/      | SPC t c          |
| centaur-tabs-local-mode     | /Toggle tabs local display/ | SPC t C          |
| centaur-tabs-forward        | /Next tab/                  | g <right> or g t |
| centaur-tabs-backward       | /Previous tab/              | g <left> or g T  |
| centaur-tabs-forward-group  | /Next tab group/            | g <down>         |
| centaur-tabs-backward-group | /Previous tab group/        | g <up>           |

#+BEGIN_SRC emacs-lisp
(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•")
(map! :leader
      :desc "Toggle tabs globally" "t c" #'centaur-tabs-mode
      :desc "Toggle tabs local display" "t C" #'centaur-tabs-local-mode
      :desc "Toggle tab group view" "t t" #'centaur-tabs-toggle-groups)
(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)
#+END_SRC

* CLIPPY

Gives us a popup box with "Clippy, the paper clip". You can make him say various things by calling 'clippy-say' function.  But the more useful functions of clippy are the two describe functions provided: 'clippy-describe-function' and 'clippy-describe-variable'.  Hit the appropriate keybinding while the point is over a function/variable to call it.  A popup with helpful clippy will appear, telling you about the function/variable (using describe-function and describe-variable respectively).

| COMMAND                  | DESCRIPTION                           | KEYBINDING |
|--------------------------+---------------------------------------+------------|
| clippy-describe-function | /Clippy describes function under point/ | SPC c h f  |
| clippy-describe-variable | /Clippy describes variable under point/ | SPC c h v  |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("c h" . "Help info from Clippy")
       :desc "Clippy describes function under point" "f" #'clippy-describe-function
       :desc "Clippy describes variable under point" "v" #'clippy-describe-variable))

#+end_src

* DIRED

Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

** Keybindings To Open Dired

| COMMAND    | DESCRIPTION                        | KEYBINDING |
|------------+------------------------------------+------------|
| dired      | /Open dired file manager/            | SPC d d    |
| dired-jump | /Jump to current directory in dired/ | SPC d j    |

** Keybindings Within Dired
*** Basic dired commands

| COMMAND                | DESCRIPTION                                 | KEYBINDING |
|------------------------+---------------------------------------------+------------|
| dired-view-file        | /View file in dired/                          | SPC d v    |
| dired-up-directory     | /Go up in directory tree/                     | h          |
| dired-find-file        | /Go down in directory tree (or open if file)/ | l          |
| dired-next-line        | /Move down to next line/                      | j          |
| dired-previous-line    | /Move up to previous line/                    | k          |
| dired-mark             | /Mark file at point/                          | m          |
| dired-unmark           | /Unmark file at point/                        | u          |
| dired-do-copy          | /Copy current file or marked files/           | C          |
| dired-do-rename        | /Rename current file or marked files/         | R          |
| dired-hide-details     | /Toggle detailed listings on/off/             | (          |
| dired-git-info-mode    | /Toggle git information on/off/               | )          |
| dired-create-directory | /Create new empty directory/                  | +          |
| dired-diff             | /Compare file at point with another/          | =          |
| dired-subtree-toggle   | /Toggle viewing subtree at point/             | TAB        |

*** Dired commands using regex

| COMMAND                 | DESCRIPTION                | KEYBINDING |
|-------------------------+----------------------------+------------|
| dired-mark-files-regexp | /Mark files using regex/     | % m        |
| dired-do-copy-regexp    | /Copy files using regex/     | % C        |
| dired-do-rename-regexp  | /Rename files using regex/   | % R        |
| dired-mark-files-regexp | /Mark all files using regex/ | * %        |

*** File permissions and ownership

| COMMAND         | DESCRIPTION                      | KEYBINDING |
|-----------------+----------------------------------+------------|
| dired-do-chgrp  | /Change the group of marked files/ | g G        |
| dired-do-chmod  | /Change the mode of marked files/  | M          |
| dired-do-chown  | /Change the owner of marked files/ | O          |
| dired-do-rename | /Rename file or all marked files/  | R          |

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired image previews" "d p" #'peep-dired
        :desc "Dired view file"           "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "Z") 'dired-do-compress
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-do-kill-lines
  (kbd "% l") 'dired-downcase
  (kbd "% m") 'dired-mark-files-regexp
  (kbd "% u") 'dired-upcase
  (kbd "* %") 'dired-mark-files-regexp
  (kbd "* .") 'dired-mark-extension
  (kbd "* /") 'dired-mark-directories
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
#+end_src

** Keybindings Within Dired With Peep-Dired-Mode Enabled
If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'

| COMMAND              | DESCRIPTION                              | KEYBINDING |
|----------------------+------------------------------------------+------------|
| peep-dired           | /Toggle previews within dired/             | SPC d p    |
| peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC

** Making deleted files go to trash can
#+begin_src emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.local/share/Trash/files/")
#+end_src

=NOTE=: For convenience, you may want to create a symlink to 'local/share/Trash' in your home directory:
#+begin_example
cd ~/
ln -s ~/.local/share/Trash .
#+end_example

* DOOM THEME

Setting the theme to doom-one.  To try out new themes, I set a keybinding for counsel-load-theme with 'SPC h t'.

#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
(map! :leader
      :desc "Load new theme" "h t" #'counsel-load-theme)
#+end_src

* EMOJIS
Emojify is an Emacs extension to display emojis. It can display github style emojis like :smile: or plain ascii ones like :).

I have created a toggle for this using the 'SPC t e' keybinding.

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
(map! :leader
      :desc "Toggle emojify" "t e" #'global-emojify-mode)
#+end_src

* EVIL TWEAKS

** Remap :wq and :q to kill buffer
When using EVIL mode with Emacs, I prefer think of it as a mini Vim within Emacs. Because of this, I want to remap =:wq= and =:q= to simply kill the current buffer rather than completely quitting Emacs. This is a reworking of a hack I found from someone on a Chinese Emacs forum many years ago when I used Spacemacs for a bit.
The original user goes by the name liu233w, so credit goes to him.
Original post: https://emacs-china.org/t/evil-q-kill-buffer/626/4

#+begin_src emacs-lisp
(defun rh/ex-kill-buffer-and-close ()
  (interactive)
  (unless (char-equal (elt (buffer-name) 0) ?*)
    (kill-this-buffer))
  )

(defun rh/ex-save-kill-buffer-and-close ()
  (interactive)
  (save-buffer)
  (kill-this-buffer)
  )

(evil-ex-define-cmd "q[uit]" 'rh/ex-kill-buffer-and-close )
(evil-ex-define-cmd "wq" 'rh/ex-save-kill-buffer-and-close )
#+end_src

* FONTS

Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance like 'setq' in elisp.

I have also attempted to account for HiDPI displays by doubling the font size if the screen size is larger than 1080 pixels in height.

#+BEGIN_SRC emacs-lisp
(when window-system
  (if  (eq system-type 'darwin)
    (setq doom-font "VictorMono Nerd Font")
    (setq doom-variable-pitch-font "Annai MN")
    (setq doom-big-font "VictorMono Nerd Font"))
  (if   (eq system-type 'gnu/linux)
    (setq doom-font "VictorMono Nerd Font"))
    (setq doom-variable-pitch-font "Annai MN")
    (setq doom-big-font "VictorMono Nerd Font"))

  (if (> (display-pixel-height) 1080)
    (setq doom-font-size 24)
    (setq doom-variable-pitch-font-size 30)
    (setq doom-big-font-size 48))
  (if (<= (display-pixel-height) 1080)
    (setq doom-font-size 12)
    (setq doom-variable-pitch-font-size 15)
    (setq doom-big-font-size 24))
;; (setq doom-font (font-spec :family "VictorMono Nerd Font" :size 12)
;;       doom-variable-pitch-font (font-spec :family "Annai MN" :size 15)
;;       doom-big-font (font-spec :family "VictorMono Nerd Font" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

* NEOTREE

Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  Doom Emacs had no keybindings set for neotree.  Since Doom Emacs uses ‘SPC t’ for ‘toggle’ keybindings, I used ‘SPC t n’ for toggle-neotree.

#+begin_src emacs-lisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
;;(after! doom-themes
;;  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree"  "d n" #'neotree-dir)
#+end_src

* MAGIT

Magit is the Emacs built in Git manager, practially everything you can do in git on the command line can be done with Magit.

However, there doesn't appear to be keybindings for, what I'd call, essential git commands, so I've added the following keybindings (some overriding the default Doom Emacs ones).

| COMMAND      | DESCRIPTION                                                    | KEYBINDING |
|--------------+----------------------------------------------------------------+------------|
| magit-pull   | Pull from remote repository                                    | SPC g p    |
| magit-push   | Push code to remote repository                                 | SPC g P    |
| magit-diff   | View differences between branches and commits                  | SPC g d    |
| magit-log    | View commit log for current local repository                   | SPC g L    |
| magit-rebase | Rebase your local code with the remote repository              | SPC g r    |
| magit-reset  | Reset your branch with the remote repository or earlier commit | SPC g R    |

#+begin_src emacs-lisp
(map! :leader
      :desc "Magit pull"   "g p" #'magit-pull
      :desc "Magit push"   "g P" #'magit-push
      :desc "Magit diff"   "g d" #'magit-diff
      :desc "Magit log"    "g L" #'magit-log ;; Override Doom Emacs's default
      :desc "Magit rebase" "g r" #'magit-rebase ;; Override Doom Emacs's default
      :desc "Magit reset"  "g R" #'magit-reset) ;; Override Doom Emacs's default
#+end_src

** Magit-forge
For the ability to work with extended features provided by Github and Gitlab, we need to use the forge extension of Magit, then we also need a personal token. Here we tell Emacs where our token is sotred. More information about how to get started is here:
https://magit.vc/manual/ghub.html#Creating-and-Storing-a-Token

#+begin_src emacs-lisp
(setq auth-sources '("~/.authinfo"))
#+end_src

* MARKDOWN
#+begin_src emacs-lisp
(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.7))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.5))))
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.4))))
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.3))))
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.2)))))
#+end_src

* MAXIMISE AT START

I quite like Emacs to use the full screen at start, so lets add the following to make that dream a reality.

#+begin_src emacs-lisp
(add-hook 'window-setup-hook #'toggle-frame-maximized)
#+end_src

* MINIMAP
A minimap sidebar displaying a smaller version of the current buffer on either the left or right side. It highlights the currently shown region and updates its position automatically.  Be aware that this minimap program does not work in Org documents.  This is not unusual though because I have tried several minimap programs and none of them can handle Org.

| COMMAND      | DESCRIPTION                               | KEYBINDING |
|--------------+-------------------------------------------+------------|
| minimap-mode | /Toggle minimap-mode/                       | SPC t m    |

#+begin_src emacs-lisp
(setq minimap-window-location 'right)
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle minimap-mode" "m" #'minimap-mode))
#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp
(set-face-attribute 'mode-line nil :font "VictorMono Nerd Font")
(setq doom-modeline-height 12     ;; sets modeline height
      doom-modeline-bar-width 5   ;; sets right bar width
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t) ;; adds folder icon next to persp name
#+end_src

* OPEN SPECIFIC FILES

Keybindings to open files that I work with all the time using the find-file command, which is the interactive file search that opens with 'C-x C-f' in GNU Emacs or 'SPC f f' in Doom Emacs.  These keybindings use find-file non-interactively since we specify exactly what file to open.  The format I use for these bindings is 'SPC =' plus 'key' since Doom Emacs does not use 'SPC ='.

=NOTE=: Doom Emacs already has a function 'doom/open-private-config' set to the keybinding 'SPC f p'.  This allows you to open any file in your HOME/.config/doom directory, so the following keybindings that I created are not really necessary, but I created this section as an example of how to to create bindings that open specific files on your system.

| PATH TO FILE                                                                | DESCRIPTION                 | KEYBINDING |
|-----------------------------------------------------------------------------+-----------------------------+------------|
| ~/.config/doom/start.org                                                    | /Edit start.org (start page)/ | SPC = =    |
| ~/.config/doom/config.org                                                   | /Edit doom config.org/        | SPC = c    |
| ~/.config/doom/init.el                                                      | /Edit doom init.el/           | SPC = i    |
| ~/.config/doom/packages.el                                                  | /Edit doom packages.el/       | SPC = p    |
| ~/Org/agendas/work.org     | Edit work agenda file       | SPC = a w  |
| ~/Org/agendas/personal.org | Edit personal agenda file   | SPC = a p  |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("=" . "open file")
       :desc "Edit start.org (start page)" "=" #'(lambda () (interactive) (find-file "~/.config/doom/start.org"))
       :desc "Edit doom config.org"        "c" #'(lambda () (interactive) (find-file "~/.config/doom/config.org"))
       :desc "Edit doom init.el"           "i" #'(lambda () (interactive) (find-file "~/.config/doom/init.el"))
       :desc "Edit doom packages.el"       "p" #'(lambda () (interactive) (find-file "~/.config/doom/packages.el"))
       (:prefix ("a" . "Edit agendas")
       :desc "Edit work agenda"            "w" #'(lambda () (interactive) (find-file "~/Org/agendas/work.org"))
       :desc "Edit personal agenda"        "p" #'(lambda () (interactive) (find-file "~/Org/agendas/personal.org")))))
#+END_SRC

* ORG MODE

This is config for Org Mode, it has been mainly wrapped in `(after! org)` as without it, it may load in before Doom's config and get overritten later. I have also enabled org-journal, org-superstar and org-roam by adding (+journal +pretty +roam2) to the org section of my Doom Emacs init.el.

=Note:= I have set my org-directory to a directory in Dropbox which is shared between my personal and work account. The idea here is to be able to sync my Org work between my personal and work machines.

#+begin_src emacs-lisp
(map! :leader
      :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/Org/"
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
        ;; org-log-done 'time
        org-log-done 'note
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
          '(("google" . "http://www.google.com/search?q=")
            ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
            ("ddg" . "https://duckduckgo.com/?q=")
            ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-table-convert-region-max-lines 20000
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "TO REVIEW(e)"      ; A change that is ready to be reviewed
             "IN PROGRESS(i)"    ; A tast that is in progress
             "PROJ(p)"           ; A project that contains other tasks
             "BLOG(b)"           ; Blog writing assignments
             "DOCUMENT(o)"       ; Document writing assignments (split sections into tasks)
             "WAIT(w)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "APPROVED(a)"       ; Change has been approved
             "REJECTED(r)"       ; Change has been rejected
             "CANCELLED(c)" )))) ; Task has been cancelled
#+end_src

** Org-agenda

#+begin_src emacs-lisp
(after! org
  (setq org-agenda-files '("~/Org/agendas/")))

(after! org-fancy-priorities
  (setq
     ;; org-fancy-priorities-list '("[A]" "[B]" "[C]")
     ;; org-fancy-priorities-list '("❗" "[B]" "[C]")
     ;; org-fancy-priorities-list '("🟥" "🟧" "🟨")
     org-fancy-priorities-list '((?A . "❗ [Highest Priority]")
                                  (?B . "🟥 [High Priority]")
                                  (?C . "🟨 [Medium Priority]")
                                  (?D . "🟩 [Low Priority]")
                                  (?E . "☕ [Non Priority]"))
     org-priority-faces
     '((?A :foreground "#ff0000" :weight bold)
       (?B :foreground "#ff6c6b" :weight bold)
       (?C :foreground "#97d138" :weight bold)
       (?D :foreground "#25be4b" :weight bold)
       (?E :foreground "#c678dd" :weight bold))
     org-agenda-block-separator 8411)

  (setq org-agenda-custom-commands
        '(("v" "A better agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'todo))
                   (org-agenda-overriding-header "Highest-priority unfinished tasks:")))
            (tags "PRIORITY=\"B\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'todo))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags "PRIORITY=\"C\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'todo))
                   (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
            (tags "PRIORITY=\"D\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'todo))
                   (org-agenda-overriding-header "Low-priority unfinished tasks:")))
            (tags "PRIORITY=\"E\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'todo))
                   (org-agenda-overriding-header "Non-priority unfinished tasks:")))
            (tags "customtag"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo 'todo))
                   (org-agenda-overriding-header "Tasks marked with customtag:")))

            (agenda "")
            (alltodo ""))))))
#+end_src

** Org-auto-tangle

=org-auto-tangle= allows you to add the option =#+auto_tangle: t= in your Org file so that it automatically tangles when you save the document.  I have made adding this to your file even easier by creating a function 'rh/ginsert-auto-tangle-tag' and setting it to a keybinding 'SPC i a'.

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))

(defun rh/ginsert-auto-tangle-tag ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (evil-org-open-below 1)
  (insert "#+auto_tangle: t ")
  (evil-force-normal-state))

(map! :leader
      :desc "Insert auto_tangle tag" "i a" #'rh/ginsert-auto-tangle-tag)
#+end_src

** Org export
Some extra support for exporting to different formats from Org mode.

#+begin_src emacs-lisp
(use-package ox-clip)
(use-package ox-man)
(use-package ox-gemini)
#+end_src

** Org file properties

Credit for this must go to [[https://github.com/zaeph/][Leo Vivier]] who has created these functions:

+ =org-find-time-file-property= - Return the position of the time file PROPERTY if it exists. When ANYWHERE is non-nil, search beyond the preamble.
+ =org-has-time-file-property-p= - Return the position of time file PROPERTY if it is defined. As a special case, return -1 if the time file PROPERTY exists but is not defined.
+ =org-set-time-file-property= - Set the time file PROPERTY in the preamble. When ANYWHERE is non-nil, search beyond the preamble. If the position of the file PROPERTY has already been computed, it can be passed in POS.
+ =org-set-last-modified= - Update the LAST-MODIFIED file property in the preamble.

#+begin_src emacs-lisp
(after! org

  (defun rh/org-find-time-file-property (property &optional anywhere)
    "Return the position of the time file PROPERTY if it exists.
When ANYWHERE is non-nil, search beyond the preamble."
    (save-excursion
      (goto-char (point-min))
      (let ((first-heading
             (save-excursion
               (re-search-forward org-outline-regexp-bol nil t))))
        (when (re-search-forward (format "^#\\+%s:" property)
                                 (if anywhere nil first-heading)
                                 t)
          (point)))))

  (defun rh/org-has-time-file-property-p (property &optional anywhere)
    "Return the position of time file PROPERTY if it is defined.
As a special case, return -1 if the time file PROPERTY exists but
is not defined."
    (when-let ((pos (rh/org-find-time-file-property property anywhere)))
      (save-excursion
        (goto-char pos)
        (if (and (looking-at-p " ")
                 (progn (forward-char)
                        (org-at-timestamp-p 'lax)))
            pos
          -1))))

  (defun rh/org-set-time-file-property (property &optional anywhere pos)
    "Set the time file PROPERTY in the preamble.
When ANYWHERE is non-nil, search beyond the preamble.
If the position of the file PROPERTY has already been computed,
it can be passed in POS."
    (when-let ((pos (or pos
                        (rh/org-find-time-file-property property))))
      (save-excursion
        (goto-char pos)
        (if (looking-at-p " ")
            (forward-char)
          (insert " "))
        (delete-region (point) (line-end-position))
        (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
          (insert now)))))

  (defun rh/org-set-last-modified ()
    "Update the LAST-MODIFIED file property in the preamble."
    (interactive)
    (when (derived-mode-p 'org-mode)
      (rh/org-set-time-file-property "LAST-MODIFIED")))

  (add-hook 'before-save-hook #'rh/org-set-last-modified)

)

#+end_src

** Org fonts
I have created an interactive function for each color scheme (M-x rh/gorg-colors-*).  These functions will set appropriate colors and font attributes for org-level fonts and the org-table font.

#+begin_src emacs-lisp
(after! org
    (defun rh/gorg-colors-doom-one ()
    "Enable Doom One colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#51afef" ultra-bold)
            (org-level-2 1.6 "#c678dd" extra-bold)
            (org-level-3 1.5 "#98be65" bold)
            (org-level-4 1.4 "#da8548" semi-bold)
            (org-level-5 1.3 "#5699af" normal)
            (org-level-6 1.2 "#a9a1e1" normal)
            (org-level-7 1.1 "#46d9ff" normal)
            (org-level-8 1.0 "#ff6c6b" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun rh/gorg-colors-dracula ()
    "Enable Dracula colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#8be9fd" ultra-bold)
            (org-level-2 1.6 "#bd93f9" extra-bold)
            (org-level-3 1.5 "#50fa7b" bold)
            (org-level-4 1.4 "#ff79c6" semi-bold)
            (org-level-5 1.3 "#9aedfe" normal)
            (org-level-6 1.2 "#caa9fa" normal)
            (org-level-7 1.1 "#5af78e" normal)
            (org-level-8 1.0 "#ff92d0" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun rh/gorg-colors-gruvbox-dark ()
    "Enable Gruvbox Dark colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#458588" ultra-bold)
            (org-level-2 1.6 "#b16286" extra-bold)
            (org-level-3 1.5 "#98971a" bold)
            (org-level-4 1.4 "#fb4934" semi-bold)
            (org-level-5 1.3 "#83a598" normal)
            (org-level-6 1.2 "#d3869b" normal)
            (org-level-7 1.1 "#d79921" normal)
            (org-level-8 1.0 "#8ec07c" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun rh/gorg-colors-monokai-pro ()
    "Enable Monokai Pro colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#78dce8" ultra-bold)
            (org-level-2 1.6 "#ab9df2" extra-bold)
            (org-level-3 1.5 "#a9dc76" bold)
            (org-level-4 1.4 "#fc9867" semi-bold)
            (org-level-5 1.3 "#ff6188" normal)
            (org-level-6 1.2 "#ffd866" normal)
            (org-level-7 1.1 "#78dce8" normal)
            (org-level-8 1.0 "#ab9df2" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun rh/gorg-colors-nord ()
    "Enable Nord colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#81a1c1" ultra-bold)
            (org-level-2 1.6 "#b48ead" extra-bold)
            (org-level-3 1.5 "#a3be8c" bold)
            (org-level-4 1.4 "#ebcb8b" semi-bold)
            (org-level-5 1.3 "#bf616a" normal)
            (org-level-6 1.2 "#88c0d0" normal)
            (org-level-7 1.1 "#81a1c1" normal)
            (org-level-8 1.0 "#b48ead" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun rh/gorg-colors-oceanic-next ()
    "Enable Oceanic Next colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#6699cc" ultra-bold)
            (org-level-2 1.6 "#c594c5" extra-bold)
            (org-level-3 1.5 "#99c794" bold)
            (org-level-4 1.4 "#fac863" semi-bold)
            (org-level-5 1.3 "#5fb3b3" normal)
            (org-level-6 1.2 "#ec5f67" normal)
            (org-level-7 1.1 "#6699cc" normal)
            (org-level-8 1.0 "#c594c5" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun rh/gorg-colors-palenight ()
    "Enable Palenight colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#82aaff" ultra-bold)
            (org-level-2 1.6 "#c792ea" extra-bold)
            (org-level-3 1.5 "#c3e88d" bold)
            (org-level-4 1.4 "#ffcb6b" semi-bold)
            (org-level-5 1.3 "#a3f7ff" normal)
            (org-level-6 1.2 "#e1acff" normal)
            (org-level-7 1.1 "#f07178" normal)
            (org-level-8 1.0 "#ddffa7" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun rh/gorg-colors-solarized-dark ()
    "Enable Solarized Dark colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#268bd2" ultra-bold)
            (org-level-2 1.6 "#d33682" extra-bold)
            (org-level-3 1.5 "#859900" bold)
            (org-level-4 1.4 "#b58900" semi-bold)
            (org-level-5 1.3 "#cb4b16" normal)
            (org-level-6 1.2 "#6c71c4" normal)
            (org-level-7 1.1 "#2aa198" normal)
            (org-level-8 1.0 "#657b83" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun rh/gorg-colors-solarized-light ()
    "Enable Solarized Light colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#268bd2" ultra-bold)
            (org-level-2 1.6 "#d33682" extra-bold)
            (org-level-3 1.5 "#859900" bold)
            (org-level-4 1.4 "#b58900" semi-bold)
            (org-level-5 1.3 "#cb4b16" normal)
            (org-level-6 1.2 "#6c71c4" normal)
            (org-level-7 1.1 "#2aa198" normal)
            (org-level-8 1.0 "#657b83" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

    (defun rh/gorg-colors-tomorrow-night ()
    "Enable Tomorrow Night colors for Org headers."
    (interactive)
    (dolist
        (face
        '((org-level-1 1.7 "#81a2be" ultra-bold)
            (org-level-2 1.6 "#b294bb" extra-bold)
            (org-level-3 1.5 "#b5bd68" bold)
            (org-level-4 1.4 "#e6c547" semi-bold)
            (org-level-5 1.3 "#cc6666" normal)
            (org-level-6 1.2 "#70c0ba" normal)
            (org-level-7 1.1 "#b77ee0" normal)
            (org-level-8 1.0 "#9ec400" normal)))
        (set-face-attribute (nth 0 face) nil :font doom-variable-pitch-font :weight (nth 3 face) :height (nth 1 face) :foreground (nth 2 face)))
        (set-face-attribute 'org-table nil :font doom-font :weight 'normal :height 1.0 :foreground "#bfafdf"))

  ;; Load our desired rh/gorg-colors-* theme on startup
  (rh/gorg-colors-doom-one)
)
#+end_src

** Org-journal
#+begin_src emacs-lisp
(setq org-journal-dir "~/Org/journal/"
      org-journal-date-prefix "* "
      org-journal-time-prefix "** "
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org")
#+end_src

** Org Priorities

By default, Org only ships with 3 priority settings, let's change that.

#+begin_src emacs-lisp
(setq   org-highest-priority ?A
    org-default-priority ?C
    org-lowest-priority ?E
)
#+end_src

** Org-roam
[[https://github.com/org-roam/org-roam][Org-roam]] is a plain-text knowledge management system.  Org-roam borrows principles from the =Zettelkasten= method, providing a solution for non-hierarchical note-taking.  It should also work as a plug-and-play solution for anyone already using Org-mode for their personal wiki.

| COMMAND                | DESCRIPTION                        | KEYBINDING |
|------------------------+------------------------------------+------------|
| completion-at-point    | /Completion of node-insert at point/ | SPC n r c  |
| org-roam-node-find     | /Find node or create a new one/      | SPC n r f  |
| org-roam-graph         | /Show graph of all nodes/            | SPC n r g  |
| org-roam-node-insert   | /Insert link to a node/              | SPC n r i  |
| org-roam-capture       | /Capture to node/                    | SPC n r n  |
| org-roam-buffer-toggle | /Toggle roam buffer/                 | SPC n r r  |

#+begin_src emacs-lisp
(after! org
  (setq org-roam-directory "~/Org/roam/")
  (if  (eq system-type 'darwin)
        (setq org-roam-graph-viewer "/Applications/Brave Browser.app/Contents/MacOS/Brave Browser"))
  (if  (eq system-type 'gnu/linux)
        (setq org-roam-graph-viewer "brave")))

(map! :leader
      (:prefix ("n r" . "org-roam")
       :desc "Completion at point" "c" #'completion-at-point
       :desc "Find node"           "f" #'org-roam-node-find
       :desc "Show graph"          "g" #'org-roam-graph
       :desc "Insert node"         "i" #'org-roam-node-insert
       :desc "Capture to node"     "n" #'org-roam-capture
       :desc "Toggle roam buffer"  "r" #'org-roam-buffer-toggle))

(setq org-roam-capture-templates
  '(("d" "default" plain "%?"
     :target (file+head "%<%Y%m%d%H%M%S>.org"
                        "#+title: ${title}\n#+CREATED: %U\n#+LAST-MODIFIED: %U\n")
     :unnarrowed t)))
#+end_src

#+RESULTS:
| d | default | plain | %? | :target | (file+head %<%Y%m%d%H%M%S>-${slug}.org #+title: ${title} |

** Org-roam auto publish
I'm using Org-roam to build a knowledgebase, but I don't want all of my notes to be published, so to get around this, I add a tag. I'm going to add a shortcut here to add that tag to my notes.

#+begin_src emacs-lisp
(defun rh/ginsert-auto-publish ()
  "Insert auto-tangle tag in a literate config."
  (interactive)
  (evil-org-open-below 1)
  (insert "#+filetags: publish")
  (evil-force-normal-state))

(map! :leader
      :desc "Insert publish tag" "i P" #'rh/ginsert-auto-publish)
#+end_src


** Rebuild Org Cache

#+begin_src emacs-lisp
(defun rh/force-org-rebuild-cache ()
  "Rebuild the `org-mode' and `org-roam' cache."
  (interactive)
  (org-id-update-id-locations)
  ;; Note: you may need `org-roam-db-clear-all'
  ;; followed by `org-roam-db-sync'
  (org-roam-db-sync)
  (org-roam-update-org-id-locations))
#+end_src

* PERSPECTIVE
Manage multiple projects at once by harnessing the power of workspaces. Each perspective has its own buffer list and its own window layout, making it easy to work on many separate projects without getting lost in all the buffers.  Switching to a perspective activates its window configuration, and when in a perspective, only its buffers are available (by default)

| COMMAND                    | DESCRIPTION                         | KEYBINDING |
|----------------------------+-------------------------------------+------------|
| persp-switch               | /Switch to perspective NAME/          | SPC DEL    |
| persp-switch-to-buffer     | /Switch to buffer in perspective/     | SPC ,      |
| persp-next                 | /Switch to next perspective/          | SPC ]      |
| persp-prev                 | /Switch to previous perspective/      | SPC [      |
| persp-add-buffer           | /Add a buffer to current perspective/ | SPC +      |
| persp-remove-by-name       | /Remove perspective by name/          | SPC -      |

#+begin_src emacs-lisp
(map! :leader
      :desc "Switch to perspective NAME"       "DEL" #'persp-switch
      :desc "Switch to buffer in perspective"  "," #'persp-switch-to-buffer
      :desc "Switch to next perspective"       "]" #'persp-next
      :desc "Switch to previous perspective"   "[" #'persp-prev
      :desc "Add a buffer current perspective" "+" #'persp-add-buffer
      :desc "Remove perspective by name"       "-" #'persp-remove-by-name)
#+end_src

* START PAGE
Instead of using Doom's Dashboard or the Emacs Dashboard program, I have decided to just set an custom start file as my "dashboard" since it allows me more customization options.  I have added to the 'start-mode-hook' the argument 'read-only-mode'.  This is to prevent accidental editing of the start file, and to prevent clashes with the 'start-mode' specific keybindings.  You can toggle on/off read-only-mode with 'SPC t r'.

#+begin_src emacs-lisp
(setq initial-buffer-choice "~/.config/doom/start.org")

(define-minor-mode start-mode
  "Provide functions for custom start page."
  :lighter " start"
  :keymap (let ((map (make-sparse-keymap)))
          ;;(define-key map (kbd "M-z") 'eshell)
            (evil-define-key 'normal start-mode-map
              (kbd "1") '(lambda () (interactive) (find-file "~/.config/doom/config.org"))
              (kbd "2") '(lambda () (interactive) (find-file "~/.config/doom/init.el"))
              (kbd "3") '(lambda () (interactive) (find-file "~/.config/doom/packages.el"))
              (kbd "4") '(lambda () (interactive) (find-file "~/.config/doom/eshell/aliases"))
              (kbd "5") '(lambda () (interactive) (find-file "~/.config/doom/eshell/profile")))
          map))

(add-hook 'start-mode-hook 'read-only-mode) ;; make start.org read-only; use 'SPC t r' to toggle off read-only.
(provide 'start-mode)
#+end_src

* TITLE BAR
Removing the name "Doom" from "Doom Emacs" on the off chance that someone at work mistakes it for the 1993 game of the same name.

#+begin_src emacs-lisp
(setq frame-title-format '("%b – Emacs"))
#+end_src
